//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "episode_state")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Double")]
    pub time: f64,
    pub finished: bool,
    pub podcast_id: i32,
    pub ep_link: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::episode::Entity",
        from = "Column::EpLink",
        to = "super::episode::Column::Link",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Episode,
    #[sea_orm(
        belongs_to = "super::podcast::Entity",
        from = "Column::PodcastId",
        to = "super::podcast::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Podcast,
}

impl Related<super::episode::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Episode.def()
    }
}

impl Related<super::podcast::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Podcast.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
